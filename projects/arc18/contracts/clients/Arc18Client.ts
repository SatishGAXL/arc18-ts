/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "optInToApplication()void": {
      "call_config": {
        "opt_in": "CALL"
      }
    },
    "set_administrator(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "set_policy(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_payment_asset(uint64,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer_algo_payment(uint64,uint64,address,address,address,pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer_asset_payment(uint64,uint64,address,address,address,axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "offer(uint64,uint64,address,uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "royalty_free_move(uint64,uint64,address,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_policy()(address,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_offer(uint64,address)(address,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_administrator()address": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "administrator": {
          "type": "bytes",
          "key": "administrator"
        },
        "royalty_basis": {
          "type": "uint64",
          "key": "royalty_basis"
        },
        "royalty_receiver": {
          "type": "bytes",
          "key": "royalty_receiver"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 1,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjk3LjEKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpjYWxsX09wdEluICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBvcHRJblRvQXBwbGljYXRpb24oKXZvaWQKKmFiaV9yb3V0ZV9vcHRJblRvQXBwbGljYXRpb246CgkvLyBleGVjdXRlIG9wdEluVG9BcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiBvcHRJblRvQXBwbGljYXRpb24KCWludCAxCglyZXR1cm4KCi8vIG9wdEluVG9BcHBsaWNhdGlvbigpOiB2b2lkCm9wdEluVG9BcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoJcmV0c3ViCgovLyBmcm9tX2FkbWluaXN0cmF0b3IoKTogYm9vbGVhbgpmcm9tX2FkbWluaXN0cmF0b3I6Cglwcm90byAwIDEKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MjUKCS8vIHRoaXMuYWRtaW5pc3RyYXRvci52YWx1ZSA9PSB0aGlzLnR4bi5zZW5kZXIKCWJ5dGUgMHg2MTY0NmQ2OTZlNjk3Mzc0NzI2MTc0NmY3MiAvLyAiYWRtaW5pc3RyYXRvciIKCWFwcF9nbG9iYWxfZ2V0Cgl0eG4gU2VuZGVyCgk9PQoJYnogKmlmMF9lbHNlCgoJLy8gKmlmMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoyNgoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoJcmV0c3ViCgliICppZjBfZW5kCgoqaWYwX2Vsc2U6CgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoyOAoJLy8gcmV0dXJuIGZhbHNlOwoJaW50IDAKCXJldHN1YgoKKmlmMF9lbmQ6CglyZXRzdWIKCi8vIHJveWFsdHlfYW1vdW50KGFtb3VudDogdWludDY0LCByb3lhbHR5X2Jhc2lzOiB1aW50NjQpOiB1aW50NjQKcm95YWx0eV9hbW91bnQ6Cglwcm90byAyIDEKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czozMwoJLy8gcmV0dXJuIChhbW91bnQgKiByb3lhbHR5X2Jhc2lzKSAvIG1heF9yb3lhbHR5X2Jhc2lzOwoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudDogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gcm95YWx0eV9iYXNpczogdWludDY0CgkqCglpbnQgMTAwMDAKCS8KCXJldHN1YgoKLy8gcGF5X2FsZ29zKGFtb3VudDogdWludDY0LCBvd25lcjogQWRkcmVzcywgcm95YWx0eV9yZWNlaXZlcjogQWRkcmVzcywgcm95YWx0eV9iYXNpczogdWludDY0KTogdm9pZApwYXlfYWxnb3M6Cglwcm90byA0IDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjM3CgkvLyByb3lhbHR5X2Ftb3VudCA9IHRoaXMucm95YWx0eV9hbW91bnQoYW1vdW50LCByb3lhbHR5X2Jhc2lzKQoJZnJhbWVfZGlnIC00IC8vIHJveWFsdHlfYmFzaXM6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIGFtb3VudDogdWludDY0CgljYWxsc3ViIHJveWFsdHlfYW1vdW50CglmcmFtZV9idXJ5IDAgLy8gcm95YWx0eV9hbW91bnQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjM4CgkvLyBzZW5kUGF5bWVudCh7IHJlY2VpdmVyOiBvd25lciwgYW1vdW50OiBhbW91bnQgLSByb3lhbHR5X2Ftb3VudCwgZmVlOiAwIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MzgKCS8vIHJlY2VpdmVyOiBvd25lcgoJZnJhbWVfZGlnIC0yIC8vIG93bmVyOiBBZGRyZXNzCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MzgKCS8vIGFtb3VudDogYW1vdW50IC0gcm95YWx0eV9hbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDAgLy8gcm95YWx0eV9hbW91bnQ6IHVpbnQ2NAoJLQoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czozOAoJLy8gZmVlOiAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gKmlmMV9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjM5CgkvLyByb3lhbHR5X2Ftb3VudCA+IDAKCWZyYW1lX2RpZyAwIC8vIHJveWFsdHlfYW1vdW50OiB1aW50NjQKCWludCAwCgk+CglieiAqaWYxX2VuZAoKCS8vICppZjFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6NDAKCS8vIHNlbmRQYXltZW50KHsgcmVjZWl2ZXI6IHJveWFsdHlfcmVjZWl2ZXIsIGFtb3VudDogcm95YWx0eV9hbW91bnQsIGZlZTogMCB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjQwCgkvLyByZWNlaXZlcjogcm95YWx0eV9yZWNlaXZlcgoJZnJhbWVfZGlnIC0zIC8vIHJveWFsdHlfcmVjZWl2ZXI6IEFkZHJlc3MKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czo0MAoJLy8gYW1vdW50OiByb3lhbHR5X2Ftb3VudAoJZnJhbWVfZGlnIDAgLy8gcm95YWx0eV9hbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czo0MAoJLy8gZmVlOiAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoqaWYxX2VuZDoKCXJldHN1YgoKLy8gcGF5X2Fzc2V0cyhhc3NldDogQXNzZXRJRCwgYW1vdW50OiB1aW50NjQsIG93bmVyOiBBZGRyZXNzLCByb3lhbHR5X3JlY2VpdmVyOiBBZGRyZXNzLCByb3lhbHR5X2Jhc2lzOiB1aW50NjQpOiB2b2lkCnBheV9hc3NldHM6Cglwcm90byA1IDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjQ1CgkvLyByb3lhbHR5X2Ftb3VudCA9IHRoaXMucm95YWx0eV9hbW91bnQoYW1vdW50LCByb3lhbHR5X2Jhc2lzKQoJZnJhbWVfZGlnIC01IC8vIHJveWFsdHlfYmFzaXM6IHVpbnQ2NAoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudDogdWludDY0CgljYWxsc3ViIHJveWFsdHlfYW1vdW50CglmcmFtZV9idXJ5IDAgLy8gcm95YWx0eV9hbW91bnQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjQ2CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7IGFzc2V0UmVjZWl2ZXI6IG93bmVyLCBhc3NldEFtb3VudDogYW1vdW50IC0gcm95YWx0eV9hbW91bnQsIHhmZXJBc3NldDogYXNzZXQsIGZlZTogMCB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6NDYKCS8vIGFzc2V0UmVjZWl2ZXI6IG93bmVyCglmcmFtZV9kaWcgLTMgLy8gb3duZXI6IEFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjQ2CgkvLyBhc3NldEFtb3VudDogYW1vdW50IC0gcm95YWx0eV9hbW91bnQKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDAgLy8gcm95YWx0eV9hbW91bnQ6IHVpbnQ2NAoJLQoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjQ2CgkvLyB4ZmVyQXNzZXQ6IGFzc2V0CglmcmFtZV9kaWcgLTEgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6NDYKCS8vIGZlZTogMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vICppZjJfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czo0NwoJLy8gcm95YWx0eV9hbW91bnQgPiAwCglmcmFtZV9kaWcgMCAvLyByb3lhbHR5X2Ftb3VudDogdWludDY0CglpbnQgMAoJPgoJYnogKmlmMl9lbmQKCgkvLyAqaWYyX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjQ4CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7IGFzc2V0UmVjZWl2ZXI6IHJveWFsdHlfcmVjZWl2ZXIsIGFzc2V0QW1vdW50OiByb3lhbHR5X2Ftb3VudCwgeGZlckFzc2V0OiBhc3NldCwgZmVlOiAwIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czo0OAoJLy8gYXNzZXRSZWNlaXZlcjogcm95YWx0eV9yZWNlaXZlcgoJZnJhbWVfZGlnIC00IC8vIHJveWFsdHlfcmVjZWl2ZXI6IEFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjQ4CgkvLyBhc3NldEFtb3VudDogcm95YWx0eV9hbW91bnQKCWZyYW1lX2RpZyAwIC8vIHJveWFsdHlfYW1vdW50OiB1aW50NjQKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czo0OAoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjQ4CgkvLyBmZWU6IDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCippZjJfZW5kOgoJcmV0c3ViCgovLyB1cGRhdGVfb2ZmZXJfYW1vdW50KG93bmVyOiBBZGRyZXNzLCBhc3NldDogQXNzZXRJRCwgbmV3X2FtdDogdWludDY0KTogdm9pZAp1cGRhdGVfb2ZmZXJfYW1vdW50OgoJcHJvdG8gMyAwCgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6NTMKCS8vIHRoaXMub2ZmZXJzKG93bmVyLCBhc3NldCkudmFsdWUub2ZmZXJlZF9hbW91bnQgPSBuZXdfYW10CglmcmFtZV9kaWcgLTEgLy8gb3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJYXBwX2xvY2FsX2dldAoJaW50IDMyIC8vIGhlYWRPZmZzZXQKCWZyYW1lX2RpZyAtMyAvLyBuZXdfYW10OiB1aW50NjQKCWl0b2IKCXJlcGxhY2UzCglmcmFtZV9kaWcgLTEgLy8gb3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJdW5jb3ZlciAyCglhcHBfbG9jYWxfcHV0CglyZXRzdWIKCi8vIHNldF9hZG1pbmlzdHJhdG9yKGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX3NldF9hZG1pbmlzdHJhdG9yOgoJLy8gbmV3X2FkbWluOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKG5ld19hZG1pbikgZm9yIHNldF9hZG1pbmlzdHJhdG9yIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIHNldF9hZG1pbmlzdHJhdG9yKGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBzZXRfYWRtaW5pc3RyYXRvcgoJaW50IDEKCXJldHVybgoKLy8gc2V0X2FkbWluaXN0cmF0b3IobmV3X2FkbWluOiBBZGRyZXNzKTogdm9pZApzZXRfYWRtaW5pc3RyYXRvcjoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjU3CgkvLyBhc3NlcnQodGhpcy5mcm9tX2FkbWluaXN0cmF0b3IoKSwgJ05vdCBhbiBBZG1pbicpCgljYWxsc3ViIGZyb21fYWRtaW5pc3RyYXRvcgoKCS8vIE5vdCBhbiBBZG1pbgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6NTgKCS8vIHRoaXMuYWRtaW5pc3RyYXRvci52YWx1ZSA9IG5ld19hZG1pbgoJYnl0ZSAweDYxNjQ2ZDY5NmU2OTczNzQ3MjYxNzQ2ZjcyIC8vICJhZG1pbmlzdHJhdG9yIgoJZnJhbWVfZGlnIC0xIC8vIG5ld19hZG1pbjogQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludCAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKCk6IHZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czo2MgoJLy8gdGhpcy5hZG1pbmlzdHJhdG9yLnZhbHVlID0gdGhpcy50eG4uc2VuZGVyCglieXRlIDB4NjE2NDZkNjk2ZTY5NzM3NDcyNjE3NDZmNzIgLy8gImFkbWluaXN0cmF0b3IiCgl0eG4gU2VuZGVyCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBzZXRfcG9saWN5KHVpbnQ2NCxhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9zZXRfcG9saWN5OgoJLy8gcm95YWx0eV9yZWNlaXZlcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAwIChyb3lhbHR5X3JlY2VpdmVyKSBmb3Igc2V0X3BvbGljeSBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gcm95YWx0eV9iYXNpczogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBzZXRfcG9saWN5KHVpbnQ2NCxhZGRyZXNzKXZvaWQKCWNhbGxzdWIgc2V0X3BvbGljeQoJaW50IDEKCXJldHVybgoKLy8gc2V0X3BvbGljeShyb3lhbHR5X2Jhc2lzOiB1aW50NjQsIHJveWFsdHlfcmVjZWl2ZXI6IEFkZHJlc3MpOiB2b2lkCnNldF9wb2xpY3k6Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czo2NgoJLy8gYXNzZXJ0KHRoaXMuZnJvbV9hZG1pbmlzdHJhdG9yKCksICdOb3QgYW4gQWRtaW4nKQoJY2FsbHN1YiBmcm9tX2FkbWluaXN0cmF0b3IKCgkvLyBOb3QgYW4gQWRtaW4KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjY3CgkvLyBhc3NlcnQoIXRoaXMucm95YWx0eV9iYXNpcy5leGlzdHMgfHwgIXRoaXMucm95YWx0eV9yZWNlaXZlci5leGlzdHMsICdQb2xpY3kgSGFzIEFscmVhZHkgc2V0JykKCXR4bmEgQXBwbGljYXRpb25zIDAKCWJ5dGUgMHg3MjZmNzk2MTZjNzQ3OTVmNjI2MTczNjk3MyAvLyAicm95YWx0eV9iYXNpcyIKCWFwcF9nbG9iYWxfZ2V0X2V4Cglzd2FwCglwb3AKCSEKCWR1cAoJYm56ICpza2lwX29yMAoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAweDcyNmY3OTYxNmM3NDc5NWY3MjY1NjM2NTY5NzY2NTcyIC8vICJyb3lhbHR5X3JlY2VpdmVyIgoJYXBwX2dsb2JhbF9nZXRfZXgKCXN3YXAKCXBvcAoJIQoJfHwKCipza2lwX29yMDoKCS8vIFBvbGljeSBIYXMgQWxyZWFkeSBzZXQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjY4CgkvLyBhc3NlcnQocm95YWx0eV9iYXNpcyA8PSBtYXhfcm95YWx0eV9iYXNpcywgJ1JveWFsaXR5IEJhc2lzIEhhcyBFeGNlZWRlZCBNYXggVmFsdWUnKQoJZnJhbWVfZGlnIC0xIC8vIHJveWFsdHlfYmFzaXM6IHVpbnQ2NAoJaW50IDEwMDAwCgk8PQoKCS8vIFJveWFsaXR5IEJhc2lzIEhhcyBFeGNlZWRlZCBNYXggVmFsdWUKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjY5CgkvLyB0aGlzLnJveWFsdHlfYmFzaXMudmFsdWUgPSByb3lhbHR5X2Jhc2lzCglieXRlIDB4NzI2Zjc5NjE2Yzc0Nzk1ZjYyNjE3MzY5NzMgLy8gInJveWFsdHlfYmFzaXMiCglmcmFtZV9kaWcgLTEgLy8gcm95YWx0eV9iYXNpczogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjcwCgkvLyB0aGlzLnJveWFsdHlfcmVjZWl2ZXIudmFsdWUgPSByb3lhbHR5X3JlY2VpdmVyCglieXRlIDB4NzI2Zjc5NjE2Yzc0Nzk1ZjcyNjU2MzY1Njk3NjY1NzIgLy8gInJveWFsdHlfcmVjZWl2ZXIiCglmcmFtZV9kaWcgLTIgLy8gcm95YWx0eV9yZWNlaXZlcjogQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gc2V0X3BheW1lbnRfYXNzZXQodWludDY0LGJvb2wpdm9pZAoqYWJpX3JvdXRlX3NldF9wYXltZW50X2Fzc2V0OgoJLy8gaXNfYWxsb3dlZDogYm9vbAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAxCgk9PQoKCS8vIGFyZ3VtZW50IDAgKGlzX2FsbG93ZWQpIGZvciBzZXRfcGF5bWVudF9hc3NldCBtdXN0IGJlIGEgYm9vbAoJYXNzZXJ0CglpbnQgMAoJZ2V0Yml0CgoJLy8gcGF5bWVudF9hc3NldDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBzZXRfcGF5bWVudF9hc3NldCh1aW50NjQsYm9vbCl2b2lkCgljYWxsc3ViIHNldF9wYXltZW50X2Fzc2V0CglpbnQgMQoJcmV0dXJuCgovLyBzZXRfcGF5bWVudF9hc3NldChwYXltZW50X2Fzc2V0OiBBc3NldElELCBpc19hbGxvd2VkOiBib29sZWFuKTogdm9pZApzZXRfcGF5bWVudF9hc3NldDoKCXByb3RvIDIgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6NzQKCS8vIGFzc2VydCh0aGlzLmZyb21fYWRtaW5pc3RyYXRvcigpLCAnTm90IGFuIEFkbWluJykKCWNhbGxzdWIgZnJvbV9hZG1pbmlzdHJhdG9yCgoJLy8gTm90IGFuIEFkbWluCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czo3NQoJLy8gaXNfb3B0ZWQgPSB0aGlzLmFwcC5hZGRyZXNzLmlzT3B0ZWRJblRvQXNzZXQocGF5bWVudF9hc3NldCkKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gcGF5bWVudF9hc3NldDogQXNzZXRJRAoJYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCglzd2FwCglwb3AKCWZyYW1lX2J1cnkgMCAvLyBpc19vcHRlZDogYm9vbAoKCS8vICppZjNfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czo3NgoJLy8gIWlzX29wdGVkICYmIGlzX2FsbG93ZWQKCWZyYW1lX2RpZyAwIC8vIGlzX29wdGVkOiBib29sCgkhCglkdXAKCWJ6ICpza2lwX2FuZDAKCWZyYW1lX2RpZyAtMiAvLyBpc19hbGxvd2VkOiBib29sZWFuCgkmJgoKKnNraXBfYW5kMDoKCWJ6ICppZjNfZWxzZWlmMV9jb25kaXRpb24KCgkvLyAqaWYzX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjc3CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7IGFzc2V0QW1vdW50OiAwLCBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLCB4ZmVyQXNzZXQ6IHBheW1lbnRfYXNzZXQgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjc3CgkvLyBhc3NldEFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czo3NwoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjc3CgkvLyB4ZmVyQXNzZXQ6IHBheW1lbnRfYXNzZXQKCWZyYW1lX2RpZyAtMSAvLyBwYXltZW50X2Fzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWIgKmlmM19lbmQKCippZjNfZWxzZWlmMV9jb25kaXRpb246CgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czo3OAoJLy8gaXNfb3B0ZWQgJiYgIWlzX2FsbG93ZWQKCWZyYW1lX2RpZyAwIC8vIGlzX29wdGVkOiBib29sCglkdXAKCWJ6ICpza2lwX2FuZDEKCWZyYW1lX2RpZyAtMiAvLyBpc19hbGxvd2VkOiBib29sZWFuCgkhCgkmJgoKKnNraXBfYW5kMToKCWJ6ICppZjNfZW5kCgoJLy8gKmlmM19lbHNlaWYxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjc5CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgIGFzc2V0QW1vdW50OiAwLAoJLy8gICAgICAgICBhc3NldFJlY2VpdmVyOiBwYXltZW50X2Fzc2V0LmNyZWF0b3IsCgkvLyAgICAgICAgIGFzc2V0Q2xvc2VUbzogcGF5bWVudF9hc3NldC5jcmVhdG9yLAoJLy8gICAgICAgICB4ZmVyQXNzZXQ6IHBheW1lbnRfYXNzZXQsCgkvLyAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6ODAKCS8vIGFzc2V0QW1vdW50OiAwCglpbnQgMAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjgxCgkvLyBhc3NldFJlY2VpdmVyOiBwYXltZW50X2Fzc2V0LmNyZWF0b3IKCWZyYW1lX2RpZyAtMSAvLyBwYXltZW50X2Fzc2V0OiBBc3NldElECglhc3NldF9wYXJhbXNfZ2V0IEFzc2V0Q3JlYXRvcgoJcG9wCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czo4MgoJLy8gYXNzZXRDbG9zZVRvOiBwYXltZW50X2Fzc2V0LmNyZWF0b3IKCWZyYW1lX2RpZyAtMSAvLyBwYXltZW50X2Fzc2V0OiBBc3NldElECglhc3NldF9wYXJhbXNfZ2V0IEFzc2V0Q3JlYXRvcgoJcG9wCglpdHhuX2ZpZWxkIEFzc2V0Q2xvc2VUbwoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjgzCgkvLyB4ZmVyQXNzZXQ6IHBheW1lbnRfYXNzZXQKCWZyYW1lX2RpZyAtMSAvLyBwYXltZW50X2Fzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCippZjNfZW5kOgoJcmV0c3ViCgovLyB0cmFuc2Zlcl9hbGdvX3BheW1lbnQodWludDY0LHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyxwYXksdWludDY0KXZvaWQKKmFiaV9yb3V0ZV90cmFuc2Zlcl9hbGdvX3BheW1lbnQ6CgkvLyBjdXJyZW50X29mZmVyX2Ftb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA2CglidG9pCgoJLy8gcGF5bWVudDogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09CgoJLy8gYXJndW1lbnQgMSAocGF5bWVudCkgZm9yIHRyYW5zZmVyX2FsZ29fcGF5bWVudCBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyByb3lhbHR5X3JlY2VpdmVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA1CglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDIgKHJveWFsdHlfcmVjZWl2ZXIpIGZvciB0cmFuc2Zlcl9hbGdvX3BheW1lbnQgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIHRvOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDMgKHRvKSBmb3IgdHJhbnNmZXJfYWxnb19wYXltZW50IG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBmcm9tOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDQgKGZyb20pIGZvciB0cmFuc2Zlcl9hbGdvX3BheW1lbnQgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIHJveWFsdHlfYXNzZXRfYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyByb3lhbHR5X2Fzc2V0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHRyYW5zZmVyX2FsZ29fcGF5bWVudCh1aW50NjQsdWludDY0LGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLHBheSx1aW50NjQpdm9pZAoJY2FsbHN1YiB0cmFuc2Zlcl9hbGdvX3BheW1lbnQKCWludCAxCglyZXR1cm4KCi8vIHRyYW5zZmVyX2FsZ29fcGF5bWVudChyb3lhbHR5X2Fzc2V0OiBBc3NldElELCByb3lhbHR5X2Fzc2V0X2Ftb3VudDogdWludDY0LCBmcm9tOiBBZGRyZXNzLCB0bzogQWRkcmVzcywgcm95YWx0eV9yZWNlaXZlcjogQWRkcmVzcywgcGF5bWVudDogUGF5VHhuLCBjdXJyZW50X29mZmVyX2Ftb3VudDogdWludDY0KTogdm9pZAp0cmFuc2Zlcl9hbGdvX3BheW1lbnQ6Cglwcm90byA3IDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwbiAzCgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6OTcKCS8vIGFzc2VydCh0aGlzLnJveWFsdHlfYmFzaXMuZXhpc3RzICYmIHRoaXMucm95YWx0eV9yZWNlaXZlci5leGlzdHMsICdQb2xpY3kgTm90IHNldCcpCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglieXRlIDB4NzI2Zjc5NjE2Yzc0Nzk1ZjYyNjE3MzY5NzMgLy8gInJveWFsdHlfYmFzaXMiCglhcHBfZ2xvYmFsX2dldF9leAoJc3dhcAoJcG9wCglkdXAKCWJ6ICpza2lwX2FuZDIKCXR4bmEgQXBwbGljYXRpb25zIDAKCWJ5dGUgMHg3MjZmNzk2MTZjNzQ3OTVmNzI2NTYzNjU2OTc2NjU3MiAvLyAicm95YWx0eV9yZWNlaXZlciIKCWFwcF9nbG9iYWxfZ2V0X2V4Cglzd2FwCglwb3AKCSYmCgoqc2tpcF9hbmQyOgoJLy8gUG9saWN5IE5vdCBzZXQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjk4CgkvLyBhc3NlcnQodGhpcy5vZmZlcnMoZnJvbSwgcm95YWx0eV9hc3NldCkuZXhpc3RzLCAnUm95YWx0eSBBc3NldCBPZmZlciBOb3QgQXZhaWxhYmxlJykKCWZyYW1lX2RpZyAtMyAvLyBmcm9tOiBBZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglmcmFtZV9kaWcgLTEgLy8gcm95YWx0eV9hc3NldDogQXNzZXRJRAoJaXRvYgoJYXBwX2xvY2FsX2dldF9leAoJc3dhcAoJcG9wCgoJLy8gUm95YWx0eSBBc3NldCBPZmZlciBOb3QgQXZhaWxhYmxlCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czo5OQoJLy8gYXNzZXJ0KGdsb2JhbHMuZ3JvdXBTaXplID09IDIsICdHcm91cCBTaXplIE11c3QgYmUgMicpCglnbG9iYWwgR3JvdXBTaXplCglpbnQgMgoJPT0KCgkvLyBHcm91cCBTaXplIE11c3QgYmUgMgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MTAxCgkvLyBvZmZlciA9IHRoaXMub2ZmZXJzKGZyb20sIHJveWFsdHlfYXNzZXQpLnZhbHVlCglmcmFtZV9kaWcgLTEgLy8gcm95YWx0eV9hc3NldDogQXNzZXRJRAoJaXRvYgoJZnJhbWVfYnVyeSAwIC8vIHN0b3JhZ2Uga2V5Ly9vZmZlcgoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjEwMQoJLy8gb2ZmZXIgPSB0aGlzLm9mZmVycyhmcm9tLCByb3lhbHR5X2Fzc2V0KS52YWx1ZQoJZnJhbWVfZGlnIC0zIC8vIGZyb206IEFkZHJlc3MKCWZyYW1lX2J1cnkgMSAvLyBzdG9yYWdlIGFjY291bnQvL29mZmVyCgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MTAyCgkvLyBzYXZlZF9yb3lhbHR5X3JlY2VpdmVyID0gdGhpcy5yb3lhbHR5X3JlY2VpdmVyLnZhbHVlCglieXRlIDB4NzI2Zjc5NjE2Yzc0Nzk1ZjcyNjU2MzY1Njk3NjY1NzIgLy8gInJveWFsdHlfcmVjZWl2ZXIiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfYnVyeSAyIC8vIHNhdmVkX3JveWFsdHlfcmVjZWl2ZXI6IGFkZHJlc3MKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoxMDMKCS8vIHNhdmVkX3JveWFsdHlfYmFzaXMgPSB0aGlzLnJveWFsdHlfYmFzaXMudmFsdWUKCWJ5dGUgMHg3MjZmNzk2MTZjNzQ3OTVmNjI2MTczNjk3MyAvLyAicm95YWx0eV9iYXNpcyIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9idXJ5IDMgLy8gc2F2ZWRfcm95YWx0eV9iYXNpczogdWludDY0CgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MTA1CgkvLyBhc3NlcnQob2ZmZXIuYXV0aF9hZGRyZXNzID09IHRoaXMudHhuLnNlbmRlciwgJ09ubHkgQXV0aG9yaXplZCBBZGRyZXNzIGNhbiBzZW5kIHRoaXMgdHJhbnNhY3Rpb24nKQoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBhY2NvdW50Ly9vZmZlcgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL29mZmVyCglhcHBfbG9jYWxfZ2V0CglleHRyYWN0IDAgMzIKCXR4biBTZW5kZXIKCT09CgoJLy8gT25seSBBdXRob3JpemVkIEFkZHJlc3MgY2FuIHNlbmQgdGhpcyB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MTA2CgkvLyBhc3NlcnQocGF5bWVudC5yZWtleVRvID09IGdsb2JhbHMuemVyb0FkZHJlc3MsICdSZWtleWVkIEFjY291bnRzIGFyZSBOb3QgQWxsb3dlZCcpCglmcmFtZV9kaWcgLTYgLy8gcGF5bWVudDogUGF5VHhuCglndHhucyBSZWtleVRvCglnbG9iYWwgWmVyb0FkZHJlc3MKCT09CgoJLy8gUmVrZXllZCBBY2NvdW50cyBhcmUgTm90IEFsbG93ZWQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjEwNwoJLy8gYXNzZXJ0KHJveWFsdHlfYXNzZXRfYW1vdW50IDw9IG9mZmVyLm9mZmVyZWRfYW1vdW50LCAnUmVxdWVzdGVkIEFtb3VudCBpcyBHcmVhdGVyIHRoYW4gT2ZmZXJlZCBBbW91bnQnKQoJZnJhbWVfZGlnIC0yIC8vIHJveWFsdHlfYXNzZXRfYW1vdW50OiB1aW50NjQKCWZyYW1lX2RpZyAxIC8vIHN0b3JhZ2UgYWNjb3VudC8vb2ZmZXIKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9vZmZlcgoJYXBwX2xvY2FsX2dldAoJZXh0cmFjdCAzMiA4CglidG9pCgk8PQoKCS8vIFJlcXVlc3RlZCBBbW91bnQgaXMgR3JlYXRlciB0aGFuIE9mZmVyZWQgQW1vdW50Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoxMDgKCS8vIGFzc2VydChyb3lhbHR5X3JlY2VpdmVyID09IHNhdmVkX3JveWFsdHlfcmVjZWl2ZXIsICdSb3lhbGl0eSBSZWNlaXZlciBNaXNtYXRjaGVkJykKCWZyYW1lX2RpZyAtNSAvLyByb3lhbHR5X3JlY2VpdmVyOiBBZGRyZXNzCglmcmFtZV9kaWcgMiAvLyBzYXZlZF9yb3lhbHR5X3JlY2VpdmVyOiBhZGRyZXNzCgk9PQoKCS8vIFJveWFsaXR5IFJlY2VpdmVyIE1pc21hdGNoZWQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjEwOQoJLy8gYXNzZXJ0KGN1cnJlbnRfb2ZmZXJfYW1vdW50ID09IG9mZmVyLm9mZmVyZWRfYW1vdW50LCAnQ3VycmVudCBPZmZlciBBbW91bnQgTWlzbWF0Y2gnKQoJZnJhbWVfZGlnIC03IC8vIGN1cnJlbnRfb2ZmZXJfYW1vdW50OiB1aW50NjQKCWZyYW1lX2RpZyAxIC8vIHN0b3JhZ2UgYWNjb3VudC8vb2ZmZXIKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9vZmZlcgoJYXBwX2xvY2FsX2dldAoJZXh0cmFjdCAzMiA4CglidG9pCgk9PQoKCS8vIEN1cnJlbnQgT2ZmZXIgQW1vdW50IE1pc21hdGNoCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoxMTAKCS8vIHZlcmlmeVBheVR4bihwYXltZW50LCB7CgkvLyAgICAgICByZWtleVRvOiBnbG9iYWxzLnplcm9BZGRyZXNzLAoJLy8gICAgICAgY2xvc2VSZW1haW5kZXJUbzogZ2xvYmFscy56ZXJvQWRkcmVzcywKCS8vICAgICAgIHNlbmRlcjogb2ZmZXIuYXV0aF9hZGRyZXNzLAoJLy8gICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSByZWtleVRvCglmcmFtZV9kaWcgLTYgLy8gcGF5bWVudDogUGF5VHhuCglndHhucyBSZWtleVRvCglnbG9iYWwgWmVyb0FkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJwYXltZW50IiwiZmllbGQiOiJyZWtleVRvIiwiZXhwZWN0ZWQiOiJnbG9iYWxzLnplcm9BZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSBjbG9zZVJlbWFpbmRlclRvCglmcmFtZV9kaWcgLTYgLy8gcGF5bWVudDogUGF5VHhuCglndHhucyBDbG9zZVJlbWFpbmRlclRvCglnbG9iYWwgWmVyb0FkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJwYXltZW50IiwiZmllbGQiOiJjbG9zZVJlbWFpbmRlclRvIiwiZXhwZWN0ZWQiOiJnbG9iYWxzLnplcm9BZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtNiAvLyBwYXltZW50OiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBhY2NvdW50Ly9vZmZlcgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL29mZmVyCglhcHBfbG9jYWxfZ2V0CglleHRyYWN0IDAgMzIKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJwYXltZW50IiwiZmllbGQiOiJzZW5kZXIiLCJleHBlY3RlZCI6Im9mZmVyLmF1dGhfYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtNiAvLyBwYXltZW50OiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InBheW1lbnQiLCJmaWVsZCI6InJlY2VpdmVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjExNwoJLy8gdGhpcy5wYXlfYWxnb3MocGF5bWVudC5hbW91bnQsIGZyb20sIHJveWFsdHlfcmVjZWl2ZXIsIHNhdmVkX3JveWFsdHlfYmFzaXMpCglmcmFtZV9kaWcgMyAvLyBzYXZlZF9yb3lhbHR5X2Jhc2lzOiB1aW50NjQKCWZyYW1lX2RpZyAtNSAvLyByb3lhbHR5X3JlY2VpdmVyOiBBZGRyZXNzCglmcmFtZV9kaWcgLTMgLy8gZnJvbTogQWRkcmVzcwoJZnJhbWVfZGlnIC02IC8vIHBheW1lbnQ6IFBheVR4bgoJZ3R4bnMgQW1vdW50CgljYWxsc3ViIHBheV9hbGdvcwoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjExOQoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgYXNzZXRBbW91bnQ6IHJveWFsdHlfYXNzZXRfYW1vdW50LAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdG8sCgkvLyAgICAgICBhc3NldFNlbmRlcjogZnJvbSwKCS8vICAgICAgIGZlZTogMCwKCS8vICAgICAgIHhmZXJBc3NldDogcm95YWx0eV9hc3NldCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MTIwCgkvLyBhc3NldEFtb3VudDogcm95YWx0eV9hc3NldF9hbW91bnQKCWZyYW1lX2RpZyAtMiAvLyByb3lhbHR5X2Fzc2V0X2Ftb3VudDogdWludDY0CglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MTIxCgkvLyBhc3NldFJlY2VpdmVyOiB0bwoJZnJhbWVfZGlnIC00IC8vIHRvOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoxMjIKCS8vIGFzc2V0U2VuZGVyOiBmcm9tCglmcmFtZV9kaWcgLTMgLy8gZnJvbTogQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFNlbmRlcgoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjEyMwoJLy8gZmVlOiAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoxMjQKCS8vIHhmZXJBc3NldDogcm95YWx0eV9hc3NldAoJZnJhbWVfZGlnIC0xIC8vIHJveWFsdHlfYXNzZXQ6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjEyNwoJLy8gdGhpcy51cGRhdGVfb2ZmZXJfYW1vdW50KGZyb20sIHJveWFsdHlfYXNzZXQsIG9mZmVyLm9mZmVyZWRfYW1vdW50IC0gcm95YWx0eV9hc3NldF9hbW91bnQpCglmcmFtZV9kaWcgMSAvLyBzdG9yYWdlIGFjY291bnQvL29mZmVyCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vb2ZmZXIKCWFwcF9sb2NhbF9nZXQKCWV4dHJhY3QgMzIgOAoJYnRvaQoJZnJhbWVfZGlnIC0yIC8vIHJveWFsdHlfYXNzZXRfYW1vdW50OiB1aW50NjQKCS0KCWZyYW1lX2RpZyAtMSAvLyByb3lhbHR5X2Fzc2V0OiBBc3NldElECglmcmFtZV9kaWcgLTMgLy8gZnJvbTogQWRkcmVzcwoJY2FsbHN1YiB1cGRhdGVfb2ZmZXJfYW1vdW50CglyZXRzdWIKCi8vIHRyYW5zZmVyX2Fzc2V0X3BheW1lbnQodWludDY0LHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyxheGZlcix1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV90cmFuc2Zlcl9hc3NldF9wYXltZW50OgoJLy8gY3VycmVudF9vZmZlcl9hbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNwoJYnRvaQoKCS8vIHBheW1lbnRfYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNgoJYnRvaQoKCS8vIHBheW1lbnQ6IGF4ZmVyCgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBheGZlcgoJPT0KCgkvLyBhcmd1bWVudCAyIChwYXltZW50KSBmb3IgdHJhbnNmZXJfYXNzZXRfcGF5bWVudCBtdXN0IGJlIGEgYXhmZXIgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIHJveWFsdHlfcmVjZWl2ZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDUKCWR1cAoJbGVuCglpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMyAocm95YWx0eV9yZWNlaXZlcikgZm9yIHRyYW5zZmVyX2Fzc2V0X3BheW1lbnQgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIHRvOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDQgKHRvKSBmb3IgdHJhbnNmZXJfYXNzZXRfcGF5bWVudCBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZnJvbTogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCA1IChmcm9tKSBmb3IgdHJhbnNmZXJfYXNzZXRfcGF5bWVudCBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gcm95YWx0eV9hc3NldF9hbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIHJveWFsdHlfYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgdHJhbnNmZXJfYXNzZXRfcGF5bWVudCh1aW50NjQsdWludDY0LGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLGF4ZmVyLHVpbnQ2NCx1aW50NjQpdm9pZAoJY2FsbHN1YiB0cmFuc2Zlcl9hc3NldF9wYXltZW50CglpbnQgMQoJcmV0dXJuCgovLyB0cmFuc2Zlcl9hc3NldF9wYXltZW50KHJveWFsdHlfYXNzZXQ6IEFzc2V0SUQsIHJveWFsdHlfYXNzZXRfYW1vdW50OiB1aW50NjQsIGZyb206IEFkZHJlc3MsIHRvOiBBZGRyZXNzLCByb3lhbHR5X3JlY2VpdmVyOiBBZGRyZXNzLCBwYXltZW50OiBBc3NldFRyYW5zZmVyVHhuLCBwYXltZW50X2Fzc2V0OiBBc3NldElELCBjdXJyZW50X29mZmVyX2Ftb3VudDogdWludDY0KTogdm9pZAp0cmFuc2Zlcl9hc3NldF9wYXltZW50OgoJcHJvdG8gOCAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gMwoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjE0MAoJLy8gYXNzZXJ0KHRoaXMucm95YWx0eV9iYXNpcy5leGlzdHMgJiYgdGhpcy5yb3lhbHR5X3JlY2VpdmVyLmV4aXN0cywgJ1BvbGljeSBOb3Qgc2V0JykKCXR4bmEgQXBwbGljYXRpb25zIDAKCWJ5dGUgMHg3MjZmNzk2MTZjNzQ3OTVmNjI2MTczNjk3MyAvLyAicm95YWx0eV9iYXNpcyIKCWFwcF9nbG9iYWxfZ2V0X2V4Cglzd2FwCglwb3AKCWR1cAoJYnogKnNraXBfYW5kMwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAweDcyNmY3OTYxNmM3NDc5NWY3MjY1NjM2NTY5NzY2NTcyIC8vICJyb3lhbHR5X3JlY2VpdmVyIgoJYXBwX2dsb2JhbF9nZXRfZXgKCXN3YXAKCXBvcAoJJiYKCipza2lwX2FuZDM6CgkvLyBQb2xpY3kgTm90IHNldAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MTQxCgkvLyBhc3NlcnQodGhpcy5vZmZlcnMoZnJvbSwgcm95YWx0eV9hc3NldCkuZXhpc3RzLCAnUm95YWx0eSBBc3NldCBPZmZlciBOb3QgQXZhaWxhYmxlJykKCWZyYW1lX2RpZyAtMyAvLyBmcm9tOiBBZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglmcmFtZV9kaWcgLTEgLy8gcm95YWx0eV9hc3NldDogQXNzZXRJRAoJaXRvYgoJYXBwX2xvY2FsX2dldF9leAoJc3dhcAoJcG9wCgoJLy8gUm95YWx0eSBBc3NldCBPZmZlciBOb3QgQXZhaWxhYmxlCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoxNDIKCS8vIGFzc2VydChnbG9iYWxzLmdyb3VwU2l6ZSA9PSAyLCAnR3JvdXAgU2l6ZSBNdXN0IGJlIDInKQoJZ2xvYmFsIEdyb3VwU2l6ZQoJaW50IDIKCT09CgoJLy8gR3JvdXAgU2l6ZSBNdXN0IGJlIDIKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjE0NAoJLy8gb2ZmZXIgPSB0aGlzLm9mZmVycyhmcm9tLCByb3lhbHR5X2Fzc2V0KS52YWx1ZQoJZnJhbWVfZGlnIC0xIC8vIHJveWFsdHlfYXNzZXQ6IEFzc2V0SUQKCWl0b2IKCWZyYW1lX2J1cnkgMCAvLyBzdG9yYWdlIGtleS8vb2ZmZXIKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoxNDQKCS8vIG9mZmVyID0gdGhpcy5vZmZlcnMoZnJvbSwgcm95YWx0eV9hc3NldCkudmFsdWUKCWZyYW1lX2RpZyAtMyAvLyBmcm9tOiBBZGRyZXNzCglmcmFtZV9idXJ5IDEgLy8gc3RvcmFnZSBhY2NvdW50Ly9vZmZlcgoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjE0NQoJLy8gc2F2ZWRfcm95YWx0eV9yZWNlaXZlciA9IHRoaXMucm95YWx0eV9yZWNlaXZlci52YWx1ZQoJYnl0ZSAweDcyNmY3OTYxNmM3NDc5NWY3MjY1NjM2NTY5NzY2NTcyIC8vICJyb3lhbHR5X3JlY2VpdmVyIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2J1cnkgMiAvLyBzYXZlZF9yb3lhbHR5X3JlY2VpdmVyOiBhZGRyZXNzCgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MTQ2CgkvLyBzYXZlZF9yb3lhbHR5X2Jhc2lzID0gdGhpcy5yb3lhbHR5X2Jhc2lzLnZhbHVlCglieXRlIDB4NzI2Zjc5NjE2Yzc0Nzk1ZjYyNjE3MzY5NzMgLy8gInJveWFsdHlfYmFzaXMiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfYnVyeSAzIC8vIHNhdmVkX3JveWFsdHlfYmFzaXM6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjE0OAoJLy8gYXNzZXJ0KG9mZmVyLmF1dGhfYWRkcmVzcyA9PSB0aGlzLnR4bi5zZW5kZXIsICdPbmx5IEF1dGhvcml6ZWQgQWRkcmVzcyBjYW4gc2VuZCB0aGlzIHRyYW5zYWN0aW9uJykKCWZyYW1lX2RpZyAxIC8vIHN0b3JhZ2UgYWNjb3VudC8vb2ZmZXIKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9vZmZlcgoJYXBwX2xvY2FsX2dldAoJZXh0cmFjdCAwIDMyCgl0eG4gU2VuZGVyCgk9PQoKCS8vIE9ubHkgQXV0aG9yaXplZCBBZGRyZXNzIGNhbiBzZW5kIHRoaXMgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjE0OQoJLy8gYXNzZXJ0KHBheW1lbnQucmVrZXlUbyA9PSBnbG9iYWxzLnplcm9BZGRyZXNzLCAnUmVrZXllZCBBY2NvdW50cyBhcmUgTm90IEFsbG93ZWQnKQoJZnJhbWVfZGlnIC02IC8vIHBheW1lbnQ6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFJla2V5VG8KCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCgkvLyBSZWtleWVkIEFjY291bnRzIGFyZSBOb3QgQWxsb3dlZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MTUwCgkvLyBhc3NlcnQocm95YWx0eV9hc3NldF9hbW91bnQgPD0gb2ZmZXIub2ZmZXJlZF9hbW91bnQsICdSZXF1ZXN0ZWQgQW1vdW50IGlzIEdyZWF0ZXIgdGhhbiBPZmZlcmVkIEFtb3VudCcpCglmcmFtZV9kaWcgLTIgLy8gcm95YWx0eV9hc3NldF9hbW91bnQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBhY2NvdW50Ly9vZmZlcgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL29mZmVyCglhcHBfbG9jYWxfZ2V0CglleHRyYWN0IDMyIDgKCWJ0b2kKCTw9CgoJLy8gUmVxdWVzdGVkIEFtb3VudCBpcyBHcmVhdGVyIHRoYW4gT2ZmZXJlZCBBbW91bnQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjE1MQoJLy8gYXNzZXJ0KHJveWFsdHlfcmVjZWl2ZXIgPT0gc2F2ZWRfcm95YWx0eV9yZWNlaXZlciwgJ1JveWFsaXR5IFJlY2VpdmVyIE1pc21hdGNoZWQnKQoJZnJhbWVfZGlnIC01IC8vIHJveWFsdHlfcmVjZWl2ZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAyIC8vIHNhdmVkX3JveWFsdHlfcmVjZWl2ZXI6IGFkZHJlc3MKCT09CgoJLy8gUm95YWxpdHkgUmVjZWl2ZXIgTWlzbWF0Y2hlZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MTUyCgkvLyBhc3NlcnQoY3VycmVudF9vZmZlcl9hbW91bnQgPT0gb2ZmZXIub2ZmZXJlZF9hbW91bnQsICdDdXJyZW50IE9mZmVyIEFtb3VudCBNaXNtYXRjaCcpCglmcmFtZV9kaWcgLTggLy8gY3VycmVudF9vZmZlcl9hbW91bnQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBhY2NvdW50Ly9vZmZlcgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL29mZmVyCglhcHBfbG9jYWxfZ2V0CglleHRyYWN0IDMyIDgKCWJ0b2kKCT09CgoJLy8gQ3VycmVudCBPZmZlciBBbW91bnQgTWlzbWF0Y2gKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjE1MwoJLy8gdmVyaWZ5QXNzZXRUcmFuc2ZlclR4bihwYXltZW50LCB7CgkvLyAgICAgICByZWtleVRvOiBnbG9iYWxzLnplcm9BZGRyZXNzLAoJLy8gICAgICAgc2VuZGVyOiBvZmZlci5hdXRoX2FkZHJlc3MsCgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgeGZlckFzc2V0OiBwYXltZW50X2Fzc2V0LAoJLy8gICAgICAgYXNzZXRDbG9zZVRvOiBnbG9iYWxzLnplcm9BZGRyZXNzLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgcmVrZXlUbwoJZnJhbWVfZGlnIC02IC8vIHBheW1lbnQ6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFJla2V5VG8KCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InBheW1lbnQiLCJmaWVsZCI6InJla2V5VG8iLCJleHBlY3RlZCI6Imdsb2JhbHMuemVyb0FkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC02IC8vIHBheW1lbnQ6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFNlbmRlcgoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBhY2NvdW50Ly9vZmZlcgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL29mZmVyCglhcHBfbG9jYWxfZ2V0CglleHRyYWN0IDAgMzIKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJwYXltZW50IiwiZmllbGQiOiJzZW5kZXIiLCJleHBlY3RlZCI6Im9mZmVyLmF1dGhfYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJZnJhbWVfZGlnIC02IC8vIHBheW1lbnQ6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0UmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicGF5bWVudCIsImZpZWxkIjoiYXNzZXRSZWNlaXZlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgeGZlckFzc2V0CglmcmFtZV9kaWcgLTYgLy8gcGF5bWVudDogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgWGZlckFzc2V0CglmcmFtZV9kaWcgLTcgLy8gcGF5bWVudF9hc3NldDogQXNzZXRJRAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InBheW1lbnQiLCJmaWVsZCI6InhmZXJBc3NldCIsImV4cGVjdGVkIjoicGF5bWVudF9hc3NldCJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRDbG9zZVRvCglmcmFtZV9kaWcgLTYgLy8gcGF5bWVudDogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRDbG9zZVRvCglnbG9iYWwgWmVyb0FkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJwYXltZW50IiwiZmllbGQiOiJhc3NldENsb3NlVG8iLCJleHBlY3RlZCI6Imdsb2JhbHMuemVyb0FkZHJlc3MifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MTYxCgkvLyB0aGlzLnBheV9hc3NldHMocGF5bWVudF9hc3NldCwgcGF5bWVudC5hc3NldEFtb3VudCwgZnJvbSwgcm95YWx0eV9yZWNlaXZlciwgc2F2ZWRfcm95YWx0eV9iYXNpcykKCWZyYW1lX2RpZyAzIC8vIHNhdmVkX3JveWFsdHlfYmFzaXM6IHVpbnQ2NAoJZnJhbWVfZGlnIC01IC8vIHJveWFsdHlfcmVjZWl2ZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMyAvLyBmcm9tOiBBZGRyZXNzCglmcmFtZV9kaWcgLTYgLy8gcGF5bWVudDogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCWZyYW1lX2RpZyAtNyAvLyBwYXltZW50X2Fzc2V0OiBBc3NldElECgljYWxsc3ViIHBheV9hc3NldHMKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoxNjMKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIGFzc2V0QW1vdW50OiByb3lhbHR5X2Fzc2V0X2Ftb3VudCwKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRvLAoJLy8gICAgICAgYXNzZXRTZW5kZXI6IGZyb20sCgkvLyAgICAgICBmZWU6IDAsCgkvLyAgICAgICB4ZmVyQXNzZXQ6IHJveWFsdHlfYXNzZXQsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjE2NAoJLy8gYXNzZXRBbW91bnQ6IHJveWFsdHlfYXNzZXRfYW1vdW50CglmcmFtZV9kaWcgLTIgLy8gcm95YWx0eV9hc3NldF9hbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjE2NQoJLy8gYXNzZXRSZWNlaXZlcjogdG8KCWZyYW1lX2RpZyAtNCAvLyB0bzogQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MTY2CgkvLyBhc3NldFNlbmRlcjogZnJvbQoJZnJhbWVfZGlnIC0zIC8vIGZyb206IEFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRTZW5kZXIKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoxNjcKCS8vIGZlZTogMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MTY4CgkvLyB4ZmVyQXNzZXQ6IHJveWFsdHlfYXNzZXQKCWZyYW1lX2RpZyAtMSAvLyByb3lhbHR5X2Fzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoxNzEKCS8vIHRoaXMudXBkYXRlX29mZmVyX2Ftb3VudChmcm9tLCByb3lhbHR5X2Fzc2V0LCBvZmZlci5vZmZlcmVkX2Ftb3VudCAtIHJveWFsdHlfYXNzZXRfYW1vdW50KQoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBhY2NvdW50Ly9vZmZlcgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL29mZmVyCglhcHBfbG9jYWxfZ2V0CglleHRyYWN0IDMyIDgKCWJ0b2kKCWZyYW1lX2RpZyAtMiAvLyByb3lhbHR5X2Fzc2V0X2Ftb3VudDogdWludDY0CgktCglmcmFtZV9kaWcgLTEgLy8gcm95YWx0eV9hc3NldDogQXNzZXRJRAoJZnJhbWVfZGlnIC0zIC8vIGZyb206IEFkZHJlc3MKCWNhbGxzdWIgdXBkYXRlX29mZmVyX2Ftb3VudAoJcmV0c3ViCgovLyBvZmZlcih1aW50NjQsdWludDY0LGFkZHJlc3MsdWludDY0LGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX29mZmVyOgoJLy8gb2ZmZXJlZF9hdXRoX2FkZHI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDUKCWR1cAoJbGVuCglpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMCAob2ZmZXJlZF9hdXRoX2FkZHIpIGZvciBvZmZlciBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gb2ZmZXJlZF9hbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAoJYnRvaQoKCS8vIGF1dGhfYWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAyIChhdXRoX2FkZHJlc3MpIGZvciBvZmZlciBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gcm95YWx0eV9hc3NldF9hbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIHJveWFsdHlfYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgb2ZmZXIodWludDY0LHVpbnQ2NCxhZGRyZXNzLHVpbnQ2NCxhZGRyZXNzKXZvaWQKCWNhbGxzdWIgb2ZmZXIKCWludCAxCglyZXR1cm4KCi8vIG9mZmVyKHJveWFsdHlfYXNzZXQ6IEFzc2V0SUQsIHJveWFsdHlfYXNzZXRfYW1vdW50OiB1aW50NjQsIGF1dGhfYWRkcmVzczogQWRkcmVzcywgb2ZmZXJlZF9hbW91bnQ6IHVpbnQ2NCwgb2ZmZXJlZF9hdXRoX2FkZHI6IEFkZHJlc3MpOiB2b2lkCm9mZmVyOgoJcHJvdG8gNSAwCgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MTgxCgkvLyBhc3NlcnQodGhpcy5yb3lhbHR5X2Jhc2lzLmV4aXN0cyAmJiB0aGlzLnJveWFsdHlfcmVjZWl2ZXIuZXhpc3RzLCAnUG9saWN5IE5vdCBzZXQnKQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAweDcyNmY3OTYxNmM3NDc5NWY2MjYxNzM2OTczIC8vICJyb3lhbHR5X2Jhc2lzIgoJYXBwX2dsb2JhbF9nZXRfZXgKCXN3YXAKCXBvcAoJZHVwCglieiAqc2tpcF9hbmQ0Cgl0eG5hIEFwcGxpY2F0aW9ucyAwCglieXRlIDB4NzI2Zjc5NjE2Yzc0Nzk1ZjcyNjU2MzY1Njk3NjY1NzIgLy8gInJveWFsdHlfcmVjZWl2ZXIiCglhcHBfZ2xvYmFsX2dldF9leAoJc3dhcAoJcG9wCgkmJgoKKnNraXBfYW5kNDoKCS8vIFBvbGljeSBOb3Qgc2V0Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoxODIKCS8vIGFzc2VydChyb3lhbHR5X2Fzc2V0LmNsYXdiYWNrID09IHRoaXMuYXBwLmFkZHJlc3MsICJBcHAgZG9lc24ndCBoYXZlIGNsYXdiYWNrIG9uIHRoaXMgYXNzZXQiKQoJZnJhbWVfZGlnIC0xIC8vIHJveWFsdHlfYXNzZXQ6IEFzc2V0SUQKCWFzc2V0X3BhcmFtc19nZXQgQXNzZXRDbGF3YmFjawoJcG9wCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyBBcHAgZG9lc24ndCBoYXZlIGNsYXdiYWNrIG9uIHRoaXMgYXNzZXQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjE4MwoJLy8gYXNzZXJ0KAoJLy8gICAgICAgcm95YWx0eV9hc3NldF9hbW91bnQgPj0gdGhpcy50eG4uc2VuZGVyLmFzc2V0QmFsYW5jZShyb3lhbHR5X2Fzc2V0KSwKCS8vICAgICAgICdBc3NldCBBbW91bnQgcHJvdmlkZWQgaXMgZ3JlYXRlciB0aGFuIGFzc2V0IEhvbGRpbmcnCgkvLyAgICAgKQoJZnJhbWVfZGlnIC0yIC8vIHJveWFsdHlfYXNzZXRfYW1vdW50OiB1aW50NjQKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyByb3lhbHR5X2Fzc2V0OiBBc3NldElECglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCXBvcAoJPj0KCgkvLyBBc3NldCBBbW91bnQgcHJvdmlkZWQgaXMgZ3JlYXRlciB0aGFuIGFzc2V0IEhvbGRpbmcKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjE4NwoJLy8gYXNzZXJ0KAoJLy8gICAgICAgcm95YWx0eV9hc3NldC5mcmVlemUgPT0gZ2xvYmFscy56ZXJvQWRkcmVzcyB8fCByb3lhbHR5X2Fzc2V0LmZyZWV6ZSA9PSB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgJ0ludmFsaWQgRnJlZXplIFZhbHVlIEZvciBhc3NldCcKCS8vICAgICApCglmcmFtZV9kaWcgLTEgLy8gcm95YWx0eV9hc3NldDogQXNzZXRJRAoJYXNzZXRfcGFyYW1zX2dldCBBc3NldEZyZWV6ZQoJcG9wCglnbG9iYWwgWmVyb0FkZHJlc3MKCT09CglkdXAKCWJueiAqc2tpcF9vcjEKCWZyYW1lX2RpZyAtMSAvLyByb3lhbHR5X2Fzc2V0OiBBc3NldElECglhc3NldF9wYXJhbXNfZ2V0IEFzc2V0RnJlZXplCglwb3AKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJfHwKCipza2lwX29yMToKCS8vIEludmFsaWQgRnJlZXplIFZhbHVlIEZvciBhc3NldAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MTkxCgkvLyBhc3NlcnQoCgkvLyAgICAgICByb3lhbHR5X2Fzc2V0Lm1hbmFnZXIgPT0gZ2xvYmFscy56ZXJvQWRkcmVzcyB8fCByb3lhbHR5X2Fzc2V0Lm1hbmFnZXIgPT0gdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICdJbnZhbGlkIE1hbmFnZXIgVmFsdWUgRm9yIGFzc2V0JwoJLy8gICAgICkKCWZyYW1lX2RpZyAtMSAvLyByb3lhbHR5X2Fzc2V0OiBBc3NldElECglhc3NldF9wYXJhbXNfZ2V0IEFzc2V0TWFuYWdlcgoJcG9wCglnbG9iYWwgWmVyb0FkZHJlc3MKCT09CglkdXAKCWJueiAqc2tpcF9vcjIKCWZyYW1lX2RpZyAtMSAvLyByb3lhbHR5X2Fzc2V0OiBBc3NldElECglhc3NldF9wYXJhbXNfZ2V0IEFzc2V0TWFuYWdlcgoJcG9wCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCXx8Cgoqc2tpcF9vcjI6CgkvLyBJbnZhbGlkIE1hbmFnZXIgVmFsdWUgRm9yIGFzc2V0Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoxOTYKCS8vIHRoaXMub2ZmZXJzKHRoaXMudHhuLnNlbmRlciwgcm95YWx0eV9hc3NldCkudmFsdWUgPSB7CgkvLyAgICAgICBhdXRoX2FkZHJlc3M6IGF1dGhfYWRkcmVzcywKCS8vICAgICAgIG9mZmVyZWRfYW1vdW50OiByb3lhbHR5X2Fzc2V0X2Ftb3VudCwKCS8vICAgICB9Cgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gcm95YWx0eV9hc3NldDogQXNzZXRJRAoJaXRvYgoJZnJhbWVfZGlnIC0zIC8vIGF1dGhfYWRkcmVzczogQWRkcmVzcwoJZnJhbWVfZGlnIC0yIC8vIHJveWFsdHlfYXNzZXRfYW1vdW50OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJYXBwX2xvY2FsX3B1dAoJcmV0c3ViCgovLyByb3lhbHR5X2ZyZWVfbW92ZSh1aW50NjQsdWludDY0LGFkZHJlc3MsYWRkcmVzcyx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX3JveWFsdHlfZnJlZV9tb3ZlOgoJLy8gb2ZmZXJlZF9hbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQoJYnRvaQoKCS8vIHRvOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDEgKHRvKSBmb3Igcm95YWx0eV9mcmVlX21vdmUgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGZyb206IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWR1cAoJbGVuCglpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMiAoZnJvbSkgZm9yIHJveWFsdHlfZnJlZV9tb3ZlIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyByb3lhbHR5X2Fzc2V0X2Ftb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gcm95YWx0eV9hc3NldDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSByb3lhbHR5X2ZyZWVfbW92ZSh1aW50NjQsdWludDY0LGFkZHJlc3MsYWRkcmVzcyx1aW50NjQpdm9pZAoJY2FsbHN1YiByb3lhbHR5X2ZyZWVfbW92ZQoJaW50IDEKCXJldHVybgoKLy8gcm95YWx0eV9mcmVlX21vdmUocm95YWx0eV9hc3NldDogQXNzZXRJRCwgcm95YWx0eV9hc3NldF9hbW91bnQ6IHVpbnQ2NCwgZnJvbTogQWRkcmVzcywgdG86IEFkZHJlc3MsIG9mZmVyZWRfYW1vdW50OiB1aW50NjQpOiB2b2lkCnJveWFsdHlfZnJlZV9tb3ZlOgoJcHJvdG8gNSAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjIwOQoJLy8gYXNzZXJ0KHRoaXMub2ZmZXJzKGZyb20sIHJveWFsdHlfYXNzZXQpLmV4aXN0cywgJ1JveWFsdHkgQXNzZXQgT2ZmZXIgTm90IEF2YWlsYWJsZScpCglmcmFtZV9kaWcgLTMgLy8gZnJvbTogQWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJZnJhbWVfZGlnIC0xIC8vIHJveWFsdHlfYXNzZXQ6IEFzc2V0SUQKCWl0b2IKCWFwcF9sb2NhbF9nZXRfZXgKCXN3YXAKCXBvcAoKCS8vIFJveWFsdHkgQXNzZXQgT2ZmZXIgTm90IEF2YWlsYWJsZQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MjEwCgkvLyBvZmZlciA9IHRoaXMub2ZmZXJzKGZyb20sIHJveWFsdHlfYXNzZXQpLnZhbHVlCglmcmFtZV9kaWcgLTEgLy8gcm95YWx0eV9hc3NldDogQXNzZXRJRAoJaXRvYgoJZnJhbWVfYnVyeSAwIC8vIHN0b3JhZ2Uga2V5Ly9vZmZlcgoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjIxMAoJLy8gb2ZmZXIgPSB0aGlzLm9mZmVycyhmcm9tLCByb3lhbHR5X2Fzc2V0KS52YWx1ZQoJZnJhbWVfZGlnIC0zIC8vIGZyb206IEFkZHJlc3MKCWZyYW1lX2J1cnkgMSAvLyBzdG9yYWdlIGFjY291bnQvL29mZmVyCgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MjExCgkvLyBhc3NlcnQob2ZmZXIub2ZmZXJlZF9hbW91bnQgPT0gb2ZmZXJlZF9hbW91bnQsICdHaXZlbiBPZmZlcmVkIEFtb3VudCBpcyBub3Qgc2FtZSBhcyBpbiBvZmZlcicpCglmcmFtZV9kaWcgMSAvLyBzdG9yYWdlIGFjY291bnQvL29mZmVyCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vb2ZmZXIKCWFwcF9sb2NhbF9nZXQKCWV4dHJhY3QgMzIgOAoJYnRvaQoJZnJhbWVfZGlnIC01IC8vIG9mZmVyZWRfYW1vdW50OiB1aW50NjQKCT09CgoJLy8gR2l2ZW4gT2ZmZXJlZCBBbW91bnQgaXMgbm90IHNhbWUgYXMgaW4gb2ZmZXIKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBcmMxOC5hbGdvLnRzOjIxMgoJLy8gYXNzZXJ0KG9mZmVyZWRfYW1vdW50ID49IHJveWFsdHlfYXNzZXRfYW1vdW50LCAncmVxdWVzdGVkIGFtb3VudCBpcyBncmVhdGVyIHRoYW4gb2ZmZXJlZCBhbW91bnQnKQoJZnJhbWVfZGlnIC01IC8vIG9mZmVyZWRfYW1vdW50OiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyByb3lhbHR5X2Fzc2V0X2Ftb3VudDogdWludDY0Cgk+PQoKCS8vIHJlcXVlc3RlZCBhbW91bnQgaXMgZ3JlYXRlciB0aGFuIG9mZmVyZWQgYW1vdW50Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoyMTMKCS8vIGFzc2VydChvZmZlci5hdXRoX2FkZHJlc3MgPT0gdGhpcy50eG4uc2VuZGVyLCAnT25seSBBdXRob3JpemVkIEFkZHJlc3MgY2FuIHNlbmQgdGhpcyB0cmFuc2FjdGlvbicpCglmcmFtZV9kaWcgMSAvLyBzdG9yYWdlIGFjY291bnQvL29mZmVyCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vb2ZmZXIKCWFwcF9sb2NhbF9nZXQKCWV4dHJhY3QgMCAzMgoJdHhuIFNlbmRlcgoJPT0KCgkvLyBPbmx5IEF1dGhvcml6ZWQgQWRkcmVzcyBjYW4gc2VuZCB0aGlzIHRyYW5zYWN0aW9uCglhc3NlcnQKCXJldHN1YgoKLy8gZ2V0X3BvbGljeSgpKGFkZHJlc3MsdWludDY0KQoqYWJpX3JvdXRlX2dldF9wb2xpY3k6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgZ2V0X3BvbGljeSgpKGFkZHJlc3MsdWludDY0KQoJY2FsbHN1YiBnZXRfcG9saWN5Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gZ2V0X3BvbGljeSgpOiBbQWRkcmVzcywgdWludDY0XQpnZXRfcG9saWN5OgoJcHJvdG8gMCAxCgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MjE3CgkvLyBhc3NlcnQodGhpcy5yb3lhbHR5X2Jhc2lzLmV4aXN0cyAmJiB0aGlzLnJveWFsdHlfcmVjZWl2ZXIuZXhpc3RzLCAnUG9saWN5IE5vdCBzZXQnKQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAweDcyNmY3OTYxNmM3NDc5NWY2MjYxNzM2OTczIC8vICJyb3lhbHR5X2Jhc2lzIgoJYXBwX2dsb2JhbF9nZXRfZXgKCXN3YXAKCXBvcAoJZHVwCglieiAqc2tpcF9hbmQ1Cgl0eG5hIEFwcGxpY2F0aW9ucyAwCglieXRlIDB4NzI2Zjc5NjE2Yzc0Nzk1ZjcyNjU2MzY1Njk3NjY1NzIgLy8gInJveWFsdHlfcmVjZWl2ZXIiCglhcHBfZ2xvYmFsX2dldF9leAoJc3dhcAoJcG9wCgkmJgoKKnNraXBfYW5kNToKCS8vIFBvbGljeSBOb3Qgc2V0Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoyMTgKCS8vIHJldHVybiBbdGhpcy5yb3lhbHR5X3JlY2VpdmVyLnZhbHVlLCB0aGlzLnJveWFsdHlfYmFzaXMudmFsdWVdOwoJYnl0ZSAweDcyNmY3OTYxNmM3NDc5NWY3MjY1NjM2NTY5NzY2NTcyIC8vICJyb3lhbHR5X3JlY2VpdmVyIgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGUgMHg3MjZmNzk2MTZjNzQ3OTVmNjI2MTczNjk3MyAvLyAicm95YWx0eV9iYXNpcyIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCgljb25jYXQKCXJldHN1YgoKLy8gZ2V0X29mZmVyKHVpbnQ2NCxhZGRyZXNzKShhZGRyZXNzLHVpbnQ2NCkKKmFiaV9yb3V0ZV9nZXRfb2ZmZXI6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGZyb206IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMCAoZnJvbSkgZm9yIGdldF9vZmZlciBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gcm95YWx0eV9hc3NldDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBnZXRfb2ZmZXIodWludDY0LGFkZHJlc3MpKGFkZHJlc3MsdWludDY0KQoJY2FsbHN1YiBnZXRfb2ZmZXIKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBnZXRfb2ZmZXIocm95YWx0eV9hc3NldDogQXNzZXRJRCwgZnJvbTogQWRkcmVzcyk6IFtBZGRyZXNzLCB1aW50NjRdCmdldF9vZmZlcjoKCXByb3RvIDIgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXAKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoyMjIKCS8vIGFzc2VydCh0aGlzLm9mZmVycyhmcm9tLCByb3lhbHR5X2Fzc2V0KS5leGlzdHMsICJPZmZlciBEb2Vzbid0IEV4aXN0cyIpCglmcmFtZV9kaWcgLTIgLy8gZnJvbTogQWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJZnJhbWVfZGlnIC0xIC8vIHJveWFsdHlfYXNzZXQ6IEFzc2V0SUQKCWl0b2IKCWFwcF9sb2NhbF9nZXRfZXgKCXN3YXAKCXBvcAoKCS8vIE9mZmVyIERvZXNuJ3QgRXhpc3RzCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoyMjMKCS8vIG9mZmVyID0gdGhpcy5vZmZlcnMoZnJvbSwgcm95YWx0eV9hc3NldCkudmFsdWUKCWZyYW1lX2RpZyAtMSAvLyByb3lhbHR5X2Fzc2V0OiBBc3NldElECglpdG9iCglmcmFtZV9idXJ5IDAgLy8gc3RvcmFnZSBrZXkvL29mZmVyCgoJLy8gY29udHJhY3RzXEFyYzE4LmFsZ28udHM6MjIzCgkvLyBvZmZlciA9IHRoaXMub2ZmZXJzKGZyb20sIHJveWFsdHlfYXNzZXQpLnZhbHVlCglmcmFtZV9kaWcgLTIgLy8gZnJvbTogQWRkcmVzcwoJZnJhbWVfYnVyeSAxIC8vIHN0b3JhZ2UgYWNjb3VudC8vb2ZmZXIKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoyMjQKCS8vIHJldHVybiBbb2ZmZXIuYXV0aF9hZGRyZXNzLCBvZmZlci5vZmZlcmVkX2Ftb3VudF07CglmcmFtZV9kaWcgMSAvLyBzdG9yYWdlIGFjY291bnQvL29mZmVyCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vb2ZmZXIKCWFwcF9sb2NhbF9nZXQKCWV4dHJhY3QgMCAzMgoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBhY2NvdW50Ly9vZmZlcgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL29mZmVyCglhcHBfbG9jYWxfZ2V0CglleHRyYWN0IDMyIDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDEKCXJldHN1YgoKLy8gZ2V0X2FkbWluaXN0cmF0b3IoKWFkZHJlc3MKKmFiaV9yb3V0ZV9nZXRfYWRtaW5pc3RyYXRvcjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBnZXRfYWRtaW5pc3RyYXRvcigpYWRkcmVzcwoJY2FsbHN1YiBnZXRfYWRtaW5pc3RyYXRvcgoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGdldF9hZG1pbmlzdHJhdG9yKCk6IEFkZHJlc3MKZ2V0X2FkbWluaXN0cmF0b3I6Cglwcm90byAwIDEKCgkvLyBjb250cmFjdHNcQXJjMTguYWxnby50czoyMjgKCS8vIHJldHVybiB0aGlzLmFkbWluaXN0cmF0b3IudmFsdWU7CglieXRlIDB4NjE2NDZkNjk2ZTY5NzM3NDcyNjE3NDZmNzIgLy8gImFkbWluaXN0cmF0b3IiCglhcHBfZ2xvYmFsX2dldAoJcmV0c3ViCgoqY3JlYXRlX05vT3A6CgltZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJbWV0aG9kICJzZXRfYWRtaW5pc3RyYXRvcihhZGRyZXNzKXZvaWQiCgltZXRob2QgInNldF9wb2xpY3kodWludDY0LGFkZHJlc3Mpdm9pZCIKCW1ldGhvZCAic2V0X3BheW1lbnRfYXNzZXQodWludDY0LGJvb2wpdm9pZCIKCW1ldGhvZCAidHJhbnNmZXJfYWxnb19wYXltZW50KHVpbnQ2NCx1aW50NjQsYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MscGF5LHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJ0cmFuc2Zlcl9hc3NldF9wYXltZW50KHVpbnQ2NCx1aW50NjQsYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsYXhmZXIsdWludDY0LHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJvZmZlcih1aW50NjQsdWludDY0LGFkZHJlc3MsdWludDY0LGFkZHJlc3Mpdm9pZCIKCW1ldGhvZCAicm95YWx0eV9mcmVlX21vdmUodWludDY0LHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsdWludDY0KXZvaWQiCgltZXRob2QgImdldF9wb2xpY3koKShhZGRyZXNzLHVpbnQ2NCkiCgltZXRob2QgImdldF9vZmZlcih1aW50NjQsYWRkcmVzcykoYWRkcmVzcyx1aW50NjQpIgoJbWV0aG9kICJnZXRfYWRtaW5pc3RyYXRvcigpYWRkcmVzcyIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfc2V0X2FkbWluaXN0cmF0b3IgKmFiaV9yb3V0ZV9zZXRfcG9saWN5ICphYmlfcm91dGVfc2V0X3BheW1lbnRfYXNzZXQgKmFiaV9yb3V0ZV90cmFuc2Zlcl9hbGdvX3BheW1lbnQgKmFiaV9yb3V0ZV90cmFuc2Zlcl9hc3NldF9wYXltZW50ICphYmlfcm91dGVfb2ZmZXIgKmFiaV9yb3V0ZV9yb3lhbHR5X2ZyZWVfbW92ZSAqYWJpX3JvdXRlX2dldF9wb2xpY3kgKmFiaV9yb3V0ZV9nZXRfb2ZmZXIgKmFiaV9yb3V0ZV9nZXRfYWRtaW5pc3RyYXRvcgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycgoKKmNhbGxfT3B0SW46CgltZXRob2QgIm9wdEluVG9BcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfb3B0SW5Ub0FwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgT3B0SW4KCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Arc18",
    "desc": "",
    "methods": [
      {
        "name": "optInToApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_administrator",
        "args": [
          {
            "name": "new_admin",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_policy",
        "args": [
          {
            "name": "royalty_basis",
            "type": "uint64"
          },
          {
            "name": "royalty_receiver",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_payment_asset",
        "args": [
          {
            "name": "payment_asset",
            "type": "uint64"
          },
          {
            "name": "is_allowed",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transfer_algo_payment",
        "args": [
          {
            "name": "royalty_asset",
            "type": "uint64"
          },
          {
            "name": "royalty_asset_amount",
            "type": "uint64"
          },
          {
            "name": "from",
            "type": "address"
          },
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "royalty_receiver",
            "type": "address"
          },
          {
            "name": "payment",
            "type": "pay"
          },
          {
            "name": "current_offer_amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transfer_asset_payment",
        "args": [
          {
            "name": "royalty_asset",
            "type": "uint64"
          },
          {
            "name": "royalty_asset_amount",
            "type": "uint64"
          },
          {
            "name": "from",
            "type": "address"
          },
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "royalty_receiver",
            "type": "address"
          },
          {
            "name": "payment",
            "type": "axfer"
          },
          {
            "name": "payment_asset",
            "type": "uint64"
          },
          {
            "name": "current_offer_amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "offer",
        "args": [
          {
            "name": "royalty_asset",
            "type": "uint64"
          },
          {
            "name": "royalty_asset_amount",
            "type": "uint64"
          },
          {
            "name": "auth_address",
            "type": "address"
          },
          {
            "name": "offered_amount",
            "type": "uint64"
          },
          {
            "name": "offered_auth_addr",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "royalty_free_move",
        "args": [
          {
            "name": "royalty_asset",
            "type": "uint64"
          },
          {
            "name": "royalty_asset_amount",
            "type": "uint64"
          },
          {
            "name": "from",
            "type": "address"
          },
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "offered_amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_policy",
        "args": [],
        "returns": {
          "type": "(address,uint64)"
        }
      },
      {
        "name": "get_offer",
        "args": [
          {
            "name": "royalty_asset",
            "type": "uint64"
          },
          {
            "name": "from",
            "type": "address"
          }
        ],
        "returns": {
          "type": "(address,uint64)"
        }
      },
      {
        "name": "get_administrator",
        "args": [],
        "returns": {
          "type": "address"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the Arc18 smart contract.
 */
export type Arc18 = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'set_administrator(address)void' | 'set_administrator', {
      argsObj: {
        new_admin: string
      }
      argsTuple: [new_admin: string]
      returns: void
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'set_policy(uint64,address)void' | 'set_policy', {
      argsObj: {
        royalty_basis: bigint | number
        royalty_receiver: string
      }
      argsTuple: [royalty_basis: bigint | number, royalty_receiver: string]
      returns: void
    }>
    & Record<'set_payment_asset(uint64,bool)void' | 'set_payment_asset', {
      argsObj: {
        payment_asset: bigint | number
        is_allowed: boolean
      }
      argsTuple: [payment_asset: bigint | number, is_allowed: boolean]
      returns: void
    }>
    & Record<'transfer_algo_payment(uint64,uint64,address,address,address,pay,uint64)void' | 'transfer_algo_payment', {
      argsObj: {
        royalty_asset: bigint | number
        royalty_asset_amount: bigint | number
        from: string
        to: string
        royalty_receiver: string
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        current_offer_amount: bigint | number
      }
      argsTuple: [royalty_asset: bigint | number, royalty_asset_amount: bigint | number, from: string, to: string, royalty_receiver: string, payment: TransactionToSign | Transaction | Promise<SendTransactionResult>, current_offer_amount: bigint | number]
      returns: void
    }>
    & Record<'transfer_asset_payment(uint64,uint64,address,address,address,axfer,uint64,uint64)void' | 'transfer_asset_payment', {
      argsObj: {
        royalty_asset: bigint | number
        royalty_asset_amount: bigint | number
        from: string
        to: string
        royalty_receiver: string
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        payment_asset: bigint | number
        current_offer_amount: bigint | number
      }
      argsTuple: [royalty_asset: bigint | number, royalty_asset_amount: bigint | number, from: string, to: string, royalty_receiver: string, payment: TransactionToSign | Transaction | Promise<SendTransactionResult>, payment_asset: bigint | number, current_offer_amount: bigint | number]
      returns: void
    }>
    & Record<'offer(uint64,uint64,address,uint64,address)void' | 'offer', {
      argsObj: {
        royalty_asset: bigint | number
        royalty_asset_amount: bigint | number
        auth_address: string
        offered_amount: bigint | number
        offered_auth_addr: string
      }
      argsTuple: [royalty_asset: bigint | number, royalty_asset_amount: bigint | number, auth_address: string, offered_amount: bigint | number, offered_auth_addr: string]
      returns: void
    }>
    & Record<'royalty_free_move(uint64,uint64,address,address,uint64)void' | 'royalty_free_move', {
      argsObj: {
        royalty_asset: bigint | number
        royalty_asset_amount: bigint | number
        from: string
        to: string
        offered_amount: bigint | number
      }
      argsTuple: [royalty_asset: bigint | number, royalty_asset_amount: bigint | number, from: string, to: string, offered_amount: bigint | number]
      returns: void
    }>
    & Record<'get_policy()(address,uint64)' | 'get_policy', {
      argsObj: {
      }
      argsTuple: []
      returns: [string, bigint]
    }>
    & Record<'get_offer(uint64,address)(address,uint64)' | 'get_offer', {
      argsObj: {
        royalty_asset: bigint | number
        from: string
      }
      argsTuple: [royalty_asset: bigint | number, from: string]
      returns: [string, bigint]
    }>
    & Record<'get_administrator()address' | 'get_administrator', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'administrator'?: BinaryState
      'royalty_basis'?: IntegerState
      'royalty_receiver'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type Arc18Sig = keyof Arc18['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends Arc18Sig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Arc18 smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends Arc18Sig> = Arc18['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc18 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc18Sig> = Arc18['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type Arc18CreateCalls = (typeof Arc18CallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type Arc18CreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type Arc18DeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: Arc18CreateCalls) => Arc18CreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class Arc18CallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Arc18 smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the Arc18 smart contract using the optInToApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'optInToApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the set_administrator(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAdministrator(args: MethodArgs<'set_administrator(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_administrator(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.new_admin],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_policy(uint64,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setPolicy(args: MethodArgs<'set_policy(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_policy(uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.royalty_basis, args.royalty_receiver],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_payment_asset(uint64,bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setPaymentAsset(args: MethodArgs<'set_payment_asset(uint64,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_payment_asset(uint64,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payment_asset, args.is_allowed],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer_algo_payment(uint64,uint64,address,address,address,pay,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferAlgoPayment(args: MethodArgs<'transfer_algo_payment(uint64,uint64,address,address,address,pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer_algo_payment(uint64,uint64,address,address,address,pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.royalty_asset, args.royalty_asset_amount, args.from, args.to, args.royalty_receiver, args.payment, args.current_offer_amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer_asset_payment(uint64,uint64,address,address,address,axfer,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferAssetPayment(args: MethodArgs<'transfer_asset_payment(uint64,uint64,address,address,address,axfer,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer_asset_payment(uint64,uint64,address,address,address,axfer,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.royalty_asset, args.royalty_asset_amount, args.from, args.to, args.royalty_receiver, args.payment, args.payment_asset, args.current_offer_amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the offer(uint64,uint64,address,uint64,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static offer(args: MethodArgs<'offer(uint64,uint64,address,uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'offer(uint64,uint64,address,uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.royalty_asset, args.royalty_asset_amount, args.auth_address, args.offered_amount, args.offered_auth_addr],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the royalty_free_move(uint64,uint64,address,address,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static royaltyFreeMove(args: MethodArgs<'royalty_free_move(uint64,uint64,address,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'royalty_free_move(uint64,uint64,address,address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.royalty_asset, args.royalty_asset_amount, args.from, args.to, args.offered_amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_policy()(address,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPolicy(args: MethodArgs<'get_policy()(address,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_policy()(address,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_offer(uint64,address)(address,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getOffer(args: MethodArgs<'get_offer(uint64,address)(address,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_offer(uint64,address)(address,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.royalty_asset, args.from],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_administrator()address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAdministrator(args: MethodArgs<'get_administrator()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_administrator()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Arc18 smart contract
 */
export class Arc18Client {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `Arc18Client`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Arc18['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Arc18 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: Arc18DeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(Arc18CallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Arc18 smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(Arc18CallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the Arc18 smart contract using the optInToApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result
       */
      async optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'optInToApplication()void'>>(await $this.appClient.optIn(Arc18CallFactory.optIn.optInToApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Arc18 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the set_administrator(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAdministrator(args: MethodArgs<'set_administrator(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc18CallFactory.setAdministrator(args, params))
  }

  /**
   * Calls the set_policy(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setPolicy(args: MethodArgs<'set_policy(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc18CallFactory.setPolicy(args, params))
  }

  /**
   * Calls the set_payment_asset(uint64,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setPaymentAsset(args: MethodArgs<'set_payment_asset(uint64,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc18CallFactory.setPaymentAsset(args, params))
  }

  /**
   * Calls the transfer_algo_payment(uint64,uint64,address,address,address,pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferAlgoPayment(args: MethodArgs<'transfer_algo_payment(uint64,uint64,address,address,address,pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc18CallFactory.transferAlgoPayment(args, params))
  }

  /**
   * Calls the transfer_asset_payment(uint64,uint64,address,address,address,axfer,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferAssetPayment(args: MethodArgs<'transfer_asset_payment(uint64,uint64,address,address,address,axfer,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc18CallFactory.transferAssetPayment(args, params))
  }

  /**
   * Calls the offer(uint64,uint64,address,uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public offer(args: MethodArgs<'offer(uint64,uint64,address,uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc18CallFactory.offer(args, params))
  }

  /**
   * Calls the royalty_free_move(uint64,uint64,address,address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public royaltyFreeMove(args: MethodArgs<'royalty_free_move(uint64,uint64,address,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc18CallFactory.royaltyFreeMove(args, params))
  }

  /**
   * Calls the get_policy()(address,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPolicy(args: MethodArgs<'get_policy()(address,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc18CallFactory.getPolicy(args, params))
  }

  /**
   * Calls the get_offer(uint64,address)(address,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getOffer(args: MethodArgs<'get_offer(uint64,address)(address,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc18CallFactory.getOffer(args, params))
  }

  /**
   * Calls the get_administrator()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getAdministrator(args: MethodArgs<'get_administrator()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(Arc18CallFactory.getAdministrator(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Arc18['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get administrator() {
        return Arc18Client.getBinaryState(state, 'administrator')
      },
      get royalty_basis() {
        return Arc18Client.getIntegerState(state, 'royalty_basis')
      },
      get royalty_receiver() {
        return Arc18Client.getBinaryState(state, 'royalty_receiver')
      },
    }
  }

  public compose(): Arc18Composer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setAdministrator(args: MethodArgs<'set_administrator(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setAdministrator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setPolicy(args: MethodArgs<'set_policy(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setPolicy(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setPaymentAsset(args: MethodArgs<'set_payment_asset(uint64,bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setPaymentAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transferAlgoPayment(args: MethodArgs<'transfer_algo_payment(uint64,uint64,address,address,address,pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transferAlgoPayment(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transferAssetPayment(args: MethodArgs<'transfer_asset_payment(uint64,uint64,address,address,address,axfer,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transferAssetPayment(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      offer(args: MethodArgs<'offer(uint64,uint64,address,uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.offer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      royaltyFreeMove(args: MethodArgs<'royalty_free_move(uint64,uint64,address,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.royaltyFreeMove(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPolicy(args: MethodArgs<'get_policy()(address,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPolicy(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getOffer(args: MethodArgs<'get_offer(uint64,address)(address,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getOffer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAdministrator(args: MethodArgs<'get_administrator()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAdministrator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        const $this = this
        return {
          optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.optIn.optInToApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as Arc18Composer
  }
}
export type Arc18Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_administrator(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAdministrator(args: MethodArgs<'set_administrator(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc18Composer<[...TReturns, MethodReturn<'set_administrator(address)void'>]>

  /**
   * Calls the set_policy(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPolicy(args: MethodArgs<'set_policy(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc18Composer<[...TReturns, MethodReturn<'set_policy(uint64,address)void'>]>

  /**
   * Calls the set_payment_asset(uint64,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPaymentAsset(args: MethodArgs<'set_payment_asset(uint64,bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc18Composer<[...TReturns, MethodReturn<'set_payment_asset(uint64,bool)void'>]>

  /**
   * Calls the transfer_algo_payment(uint64,uint64,address,address,address,pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferAlgoPayment(args: MethodArgs<'transfer_algo_payment(uint64,uint64,address,address,address,pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc18Composer<[...TReturns, MethodReturn<'transfer_algo_payment(uint64,uint64,address,address,address,pay,uint64)void'>]>

  /**
   * Calls the transfer_asset_payment(uint64,uint64,address,address,address,axfer,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferAssetPayment(args: MethodArgs<'transfer_asset_payment(uint64,uint64,address,address,address,axfer,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc18Composer<[...TReturns, MethodReturn<'transfer_asset_payment(uint64,uint64,address,address,address,axfer,uint64,uint64)void'>]>

  /**
   * Calls the offer(uint64,uint64,address,uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  offer(args: MethodArgs<'offer(uint64,uint64,address,uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc18Composer<[...TReturns, MethodReturn<'offer(uint64,uint64,address,uint64,address)void'>]>

  /**
   * Calls the royalty_free_move(uint64,uint64,address,address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  royaltyFreeMove(args: MethodArgs<'royalty_free_move(uint64,uint64,address,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc18Composer<[...TReturns, MethodReturn<'royalty_free_move(uint64,uint64,address,address,uint64)void'>]>

  /**
   * Calls the get_policy()(address,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPolicy(args: MethodArgs<'get_policy()(address,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc18Composer<[...TReturns, MethodReturn<'get_policy()(address,uint64)'>]>

  /**
   * Calls the get_offer(uint64,address)(address,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getOffer(args: MethodArgs<'get_offer(uint64,address)(address,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc18Composer<[...TReturns, MethodReturn<'get_offer(uint64,address)(address,uint64)'>]>

  /**
   * Calls the get_administrator()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAdministrator(args: MethodArgs<'get_administrator()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): Arc18Composer<[...TReturns, MethodReturn<'get_administrator()address'>]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the Arc18 smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientComposeCallCoreParams): Arc18Composer<[...TReturns, MethodReturn<'optInToApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Arc18 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): Arc18Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): Arc18Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<Arc18ComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<Arc18ComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type Arc18ComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type Arc18ComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
